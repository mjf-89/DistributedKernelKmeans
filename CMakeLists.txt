#set project details
PROJECT(DKK_CPP)
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

#main target
SET(DKK_TARGET dkk CACHE STRING "")
SET(DKK_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/dkk)

SET(DKK_SRC_FILES)
FILE(GLOB TMP ${DKK_SRC_DIR}/*.cpp)
SET(DKK_SRC_FILES ${DKK_SRC_FILES} ${TMP})
FILE(GLOB TMP ${DKK_SRC_DIR}/*.h)
SET(DKK_SRC_FILES ${DKK_SRC_FILES} ${TMP})

#libDKK
SET(DKK_LIB_TARGET dkk_lib CACHE STRING "")
SET(DKK_LIB_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/dkk_lib/src)
SET(DKK_LIB_INC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/dkk_lib/include)

SET(DKK_LIB_SRC_FILES)
FILE(GLOB TMP ${DKK_LIB_SRC_DIR}/*.cpp)
SET(DKK_LIB_SRC_FILES ${DKK_LIB_SRC_FILES} ${TMP})
FILE(GLOB TMP ${DKK_LIB_SRC_DIR}/*.h)
SET(DKK_LIB_SRC_FILES ${DKK_LIB_SRC_FILES} ${TMP})
FILE(GLOB TMP ${DKK_LIB_INC_DIR}/*.h)
SET(DKK_LIB_SRC_FILES ${DKK_LIB_SRC_FILES} ${TMP})

INCLUDE_DIRECTORIES(${DKK_LIB_INC_DIR})

#default plugin target
SET(DKK_PLUGIN_TARGET dkk_plg_default CACHE STRING "")
SET(DKK_PLUGIN_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/dkk_plg_default/src)
SET(DKK_PLUGIN_INC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/dkk_plg_default/include)

SET(DKK_PLUGIN_SRC_FILES)
FILE(GLOB TMP ${DKK_PLUGIN_SRC_DIR}/*.cpp)
SET(DKK_PLUGIN_SRC_FILES ${DKK_PLUGIN_SRC_FILES} ${TMP})
FILE(GLOB TMP ${DKK_PLUGIN_INC_DIR}/*.h)
SET(DKK_PLUGIN_SRC_FILES ${DKK_PLUGIN_SRC_FILES} ${TMP})

INCLUDE_DIRECTORIES(${DKK_PLUGIN_INC_DIR})

#cuda plugin target
SET(DKK_PLUGIN_CUDA 0 CACHE BOOL "")
IF(${DKK_PLUGIN_CUDA})
	SET(DKK_PLUGIN_CUDA_TARGET dkk_plg_cuda CACHE STRING "")
	SET(DKK_PLUGIN_CUDA_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/dkk_plg_cuda/src)
	SET(DKK_PLUGIN_CUDA_INC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/dkk_plg_cuda/include)
	SET(DKK_PLUGIN_CUDA_SRC_FILES)

	FILE(GLOB TMP ${DKK_PLUGIN_CUDA_SRC_DIR}/*.cpp)
	SET(DKK_PLUGIN_CUDA_SRC_FILES ${DKK_PLUGIN_CUDA_SRC_FILES} ${TMP})
	FILE(GLOB TMP ${DKK_PLUGIN_CUDA_SRC_DIR}/*.cu)
	SET(DKK_PLUGIN_CUDA_SRC_FILES ${DKK_PLUGIN_CUDA_SRC_FILES} ${TMP})
	FILE(GLOB TMP ${DKK_PLUGIN_CUDA_INC_DIR}/*.h)
	SET(DKK_PLUGIN_CUDA_SRC_FILES ${DKK_PLUGIN_CUDA_SRC_FILES} ${TMP})

	INCLUDE_DIRECTORIES(${DKK_PLUGIN_CUDA_INC_DIR})
ENDIF(${DKK_PLUGIN_CUDA})

#opencl plugin target
SET(DKK_PLUGIN_OPENCL 0 CACHE BOOL "")
IF(${DKK_PLUGIN_OPENCL})
	FIND_PACKAGE(OPENCL REQUIRED)
	SET(DKK_PLUGIN_OPENCL_TARGET dkk_plg_opencl CACHE STRING "")
	SET(DKK_PLUGIN_OPENCL_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/dkk_plg_opencl/src)
	SET(DKK_PLUGIN_OPENCL_INC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/dkk_plg_opencl/include)
	SET(DKK_PLUGIN_OPENCL_SRC_FILES)

	FILE(GLOB TMP ${DKK_PLUGIN_OPENCL_SRC_DIR}/*.cpp)
	SET(DKK_PLUGIN_OPENCL_SRC_FILES ${DKK_PLUGIN_OPENCL_SRC_FILES} ${TMP})
	FILE(GLOB TMP ${DKK_PLUGIN_OPENCL_INC_DIR}/*.h)
	SET(DKK_PLUGIN_OPENCL_SRC_FILES ${DKK_PLUGIN_OPENCL_SRC_FILES} ${TMP})

	INCLUDE_DIRECTORIES(${DKK_PLUGIN_OPENCL_INC_DIR})
ENDIF(${DKK_PLUGIN_OPENCL})

#default compilation flags to be added to every targets
IF(${WIN32})
	SET(DKK_COMPILE_FLAGS "${DKK_COMPILE_FLAGS} -DWIN32")
ENDIF(${WIN32})

IF(${UNIX})
	SET(DKK_COMPILE_FLAGS "${DKK_COMPILE_FLAGS} -DUNIX")
ENDIF(${UNIX})

#find extern dependency
FIND_PACKAGE(MPI)
INCLUDE_DIRECTORIES(${MPI_INCLUDE_PATH})

IF(${DKK_PLUGIN_CUDA})
	FIND_PACKAGE(CUDA REQUIRED)
ENDIF(${DKK_PLUGIN_CUDA})

#build libDKK
ADD_LIBRARY(${DKK_LIB_TARGET} SHARED ${DKK_LIB_SRC_FILES})
SET_TARGET_PROPERTIES(${DKK_LIB_TARGET} PROPERTIES COMPILE_FLAGS "${DKK_COMPILE_FLAGS} -DDKK_BUILDING_LIB")
TARGET_LINK_LIBRARIES(${DKK_LIB_TARGET} ${MPI_LIBRARY} ${MPI_C_LIBRARIES})
IF(${UNIX})
	TARGET_LINK_LIBRARIES(${DKK_LIB_TARGET} dl)
ENDIF(${UNIX})

#build the default plugin
ADD_LIBRARY(${DKK_PLUGIN_TARGET} SHARED ${DKK_PLUGIN_SRC_FILES})
SET_TARGET_PROPERTIES(${DKK_PLUGIN_TARGET} PROPERTIES COMPILE_FLAGS "${DKK_COMPILE_FLAGS} -DDKK_BUILDING_PLUGIN_DEFAULT")
TARGET_LINK_LIBRARIES(${DKK_PLUGIN_TARGET} ${DKK_LIB_TARGET})
TARGET_LINK_LIBRARIES(${DKK_PLUGIN_TARGET} ${MPI_LIBRARY} ${MPI_C_LIBRARIES})

#build the cuda plugin
IF(${DKK_PLUGIN_CUDA})
	CUDA_ADD_LIBRARY(${DKK_PLUGIN_CUDA_TARGET} SHARED ${DKK_PLUGIN_CUDA_SRC_FILES})
	SET(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS} -DDKK_BUILDING_PLUGIN_CUDA")
	SET_TARGET_PROPERTIES(${DKK_PLUGIN_CUDA_TARGET} PROPERTIES COMPILE_FLAGS "${DKK_COMPILE_FLAGS} -DDKK_BUILDING_PLUGIN_CUDA")
	TARGET_LINK_LIBRARIES(${DKK_PLUGIN_CUDA_TARGET} ${DKK_LIB_TARGET})
ENDIF(${DKK_PLUGIN_CUDA})

#build the executable
ADD_EXECUTABLE(${DKK_TARGET} ${DKK_SRC_FILES})
SET_TARGET_PROPERTIES(${DKK_TARGET} PROPERTIES COMPILE_FLAGS "${DKK_COMPILE_FLAGS}")
TARGET_LINK_LIBRARIES(${DKK_TARGET} ${DKK_LIB_TARGET})
TARGET_LINK_LIBRARIES(${DKK_TARGET} ${MPI_LIBRARY} ${MPI_C_LIBRARIES})
